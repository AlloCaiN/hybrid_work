// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.allo.flutterui.pigeon;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class RenderMessage {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FLTextureInfo {
    private Long width;
    public Long getWidth() { return width; }
    public void setWidth(Long setterArg) { this.width = setterArg; }

    private Long height;
    public Long getHeight() { return height; }
    public void setHeight(Long setterArg) { this.height = setterArg; }

    private Long textId;
    public Long getTextId() { return textId; }
    public void setTextId(Long setterArg) { this.textId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      toMapResult.put("textId", textId);
      return toMapResult;
    }
    static FLTextureInfo fromMap(Map<String, Object> map) {
      FLTextureInfo fromMapResult = new FLTextureInfo();
      Object width = map.get("width");
      fromMapResult.width = (width == null) ? null : ((width instanceof Integer) ? (Integer)width : (Long)width);
      Object height = map.get("height");
      fromMapResult.height = (height == null) ? null : ((height instanceof Integer) ? (Integer)height : (Long)height);
      Object textId = map.get("textId");
      fromMapResult.textId = (textId == null) ? null : ((textId instanceof Integer) ? (Integer)textId : (Long)textId);
      return fromMapResult;
    }
  }
  private static class ComposePluginApiCodec extends StandardMessageCodec {
    public static final ComposePluginApiCodec INSTANCE = new ComposePluginApiCodec();
    private ComposePluginApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return FLTextureInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof FLTextureInfo) {
        stream.write(128);
        writeValue(stream, ((FLTextureInfo) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ComposePluginApi {
    FLTextureInfo acquireTexture(Long width, Long height);

    /** The codec used by ComposePluginApi. */
    static MessageCodec<Object> getCodec() {
      return ComposePluginApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ComposePluginApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ComposePluginApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ComposePluginApi.acquireTexture", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number widthArg = (Number)args.get(0);
              if (widthArg == null) {
                throw new NullPointerException("widthArg unexpectedly null.");
              }
              Number heightArg = (Number)args.get(1);
              if (heightArg == null) {
                throw new NullPointerException("heightArg unexpectedly null.");
              }
              FLTextureInfo output = api.acquireTexture(widthArg.longValue(), heightArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
